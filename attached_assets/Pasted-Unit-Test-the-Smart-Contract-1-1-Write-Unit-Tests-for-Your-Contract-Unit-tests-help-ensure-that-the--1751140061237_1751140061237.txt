Unit Test the Smart Contract
1.1 Write Unit Tests for Your Contract
Unit tests help ensure that the functionality of your smart contract behaves as expected. You can use Hardhat for this, as it provides a framework for writing tests in Mocha and Chai.

Here's how to proceed:

Install testing dependencies:

bash
Copy
Edit
npm install --save-dev @nomiclabs/hardhat-ethers ethers chai mocha
Create test files in the /test directory, for example, test/WalletPlannerTest.js.

Write test cases for the functions you want to test.

Hereâ€™s a basic example of unit tests for your contract:

javascript
Copy
Edit
const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("WalletPlanner", function () {
  let WalletPlanner;
  let walletPlanner;
  let owner;
  let addr1;
  let addr2;

  beforeEach(async function () {
    WalletPlanner = await ethers.getContractFactory("WalletPlanner");
    [owner, addr1, addr2] = await ethers.getSigners();
    walletPlanner = await WalletPlanner.deploy();
  });

  it("Should deploy the contract correctly", async function () {
    expect(walletPlanner.address).to.be.properAddress;
  });

  it("Should allow users to save a new intent", async function () {
    const intent = {
      user: addr1.address,
      action: "stake",
      token: ethers.constants.AddressZero,
      frequency: "daily",
      condition: "gas < 30 gwei",
      targetChain: "ethereum"
    };

    await walletPlanner.saveIntent(intent);
    const intents = await walletPlanner.getUserIntents();
    expect(intents.length).to.equal(1);
    expect(intents[0].action).to.equal("stake");
  });

  it("Should allow users to pause an intent", async function () {
    const intent = {
      user: addr1.address,
      action: "stake",
      token: ethers.constants.AddressZero,
      frequency: "daily",
      condition: "gas < 30 gwei",
      targetChain: "ethereum"
    };

    await walletPlanner.saveIntent(intent);
    await walletPlanner.pauseIntent(0, true);
    const intents = await walletPlanner.getUserIntents();
    expect(intents[0].paused).to.be.true;
  });

  it("Should check condition based on frequency", async function () {
    const intent = {
      user: addr1.address,
      action: "stake",
      token: ethers.constants.AddressZero,
      frequency: "daily",
      condition: "gas < 30 gwei",
      targetChain: "ethereum"
    };

    await walletPlanner.saveIntent(intent);

    // Assuming the condition is checked via Chainlink functions, this is a simplified check
    const isConditionMet = await walletPlanner.checkCondition(addr1.address, 0);
    expect(isConditionMet).to.be.true; // You would need to test the actual off-chain logic
  });

  it("Should allow authorized automation to mark executed", async function () {
    const intent = {
      user: addr1.address,
      action: "stake",
      token: ethers.constants.AddressZero,
      frequency: "daily",
      condition: "gas < 30 gwei",
      targetChain: "ethereum"
    };

    await walletPlanner.saveIntent(intent);
    await walletPlanner.setAutomationAuthorization(owner.address, true); // Owner is authorized

    await walletPlanner.markExecuted(addr1.address, 0);
    const intentAfterExecution = await walletPlanner.getIntent(addr1.address, 0);
    expect(intentAfterExecution.lastExecuted).to.be.greaterThan(0);
  });

  it("Should prevent unauthorized automation from marking executed", async function () {
    const intent = {
      user: addr1.address,
      action: "stake",
      token: ethers.constants.AddressZero,
      frequency: "daily",
      condition: "gas < 30 gwei",
      targetChain: "ethereum"
    };

    await walletPlanner.saveIntent(intent);

    // Unauthorized address tries to mark as executed
    await expect(walletPlanner.markExecuted(addr1.address, 0)).to.be.revertedWith("Not authorized automation");
  });

  it("Should handle edge cases like empty input strings", async function () {
    await expect(walletPlanner.saveIntent({ action: "", frequency: "daily", condition: "gas < 30 gwei", targetChain: "ethereum" })).to.be.revertedWith("Action cannot be empty");
  });

  it("Should handle duplicate entries", async function () {
    const intent = {
      user: addr1.address,
      action: "stake",
      token: ethers.constants.AddressZero,
      frequency: "daily",
      condition: "gas < 30 gwei",
      targetChain: "ethereum"
    };

    await walletPlanner.saveIntent(intent);
    await expect(walletPlanner.saveIntent(intent)).to.not.emit(walletPlanner, 'IntentSaved');
  });
});
1.2 Run Your Tests
Once you've written your tests, you can run them with:

bash
Copy
Edit
npx hardhat test